#!/bin/bash
#to be sourced in .bashrc

export ACK_COLOR_MATCH="bold red"

_do_the_ack-grep() {
    normalizer="$MYACK_CAMELCASE_NORMALIZER"
    if [ -z "$normalizer" ]; then
        normalizer="camelcase-normalizer.py"
    fi

    if [ $1 -eq 1 ]; then
        icase="-i"
    else
        icase=""
    fi
    wwords="$2"
    # search in all known type by default; use fa arg for all files
    src_type_args="--known-types"
    src_type="known"
    search_pattern=""

    case "$3" in
        fc )
            src_type='cc'
            src_type_args="--cc --cpp"
            shift
            ;;
        fp )
            src_type='python'
            src_type_args="--python"
            shift
            ;;
        fr )
            src_type='ruby'
            src_type_args="--ruby"
            shift
            ;;
        fj )
            src_type="js"
            src_type_args="--js --jsx --vue"
            shift
            ;;
        fja )
            src_type="java"
            src_type_args="--java"
            shift
            ;;
        fphp )
            src_type="php"
            src_type_args="--php"
            shift
            ;;
        fw )
            src_type="web"
            src_type_args="--css --html --js --json --jsx --vue --actionscript --xml --zpt --zcml --dtml"
            shift
            ;;
        fz )
            src_type="zpt"
            src_type_args="--zpt"
            shift
            ;;
        fg)
            src_type="go"
            src_type_args="--go"
            shift
            ;;
        fs )
            src_type="sol"
            src_type_args="--sol"
            shift
            ;;
        fa )
            # search in all files. but see default ignores like dumpfiles
            src_type="all"
            src_type_args=""
            shift
            ;;
    esac
    # else - search any files or use --type at end

    entity_type_found="false"
    if [ -n "$4" ]; then
        entity_type_found="true"
        case "$3" in
            c )
                case "$src_type" in
                    cc|python|ruby|php|java|js )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bclass\s+'"$4"'\b'
                        else
                            search_pattern='\bclass\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*'
                        fi
                        ;;
                    go )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='type\s+'"($4)"'\s+(struct|interface)\b''|\b'"($4)"'\s*:=\s*struct\b'
                        else
                            search_pattern='type\s+[\w_]?[\w\d_]*'"($4)"'[\w\d_]*\s+(struct|interface)\b''|[\w_]?[\w\d_]*'"($4)"'[\w\d_]*\s*:=\s*struct\b'
                        fi

                        ;;
                    sol )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bcontract\s+'"$4"'\b'
                        else
                            search_pattern='\bcontract\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*'
                        fi
                        ;;
                esac
                shift
                ;;
            # XXX: this is define for C/C++ and function definition for the rest - rather ugly
            d )
                case "$src_type" in
                    cc )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='^\s*#\s*define\s+'"$4"'\s'
                        else
                            search_pattern='^\s*#\s*define\s+\w?[\w\d_]*'"$4"'[\w\d_]*\s'
                        fi
                        ;;
                    python )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bdef\s+'"$4"'\s*\('
                        else
                            search_pattern='\bdef\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*\s*\('
                        fi
                        ;;
                    ruby )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bdef\s+'"$4"'\b'
                        else
                            search_pattern='\bdef\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*'
                        fi
                        ;;
                    js)
                        # function x() | x: function | x = function(
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bfunction\*?\s+'"$4"'\s*\(''|\b'"$4"':\s+function\*?\s*\(''|\b'"$4"'\b\s*=\s*function\*?\s*\('
                        else
                            search_pattern='\bfunction\*?\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*\s*\(''|[\w_]?[\w\d_]*'"$4"'[\w\d_]*:\s*function\*?\s*\(''|[\w_]?[\w\d_]*'"$4"'[\w\d_]*\s*=\s*function\*?\s*\('
                        fi
                        ;;
                    go)
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bfunc\s+'"$4"'\(''|\b'"($4)"'\s*:=\s*func\('
                        else
                            search_pattern='\bfunc\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*\(''|[\w_]?[\w\d_]*'"$4"'[\w\d_]*\s*:=\s*func\('
                        fi
                        ;;
                    sol)
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\bfunction\s+'"$4"'\s*\('
                        else
                            search_pattern='\bfunction\s+[\w_]?[\w\d_]*'"$4"'[\w\d_]*\s*\('
                        fi
                        ;;
                esac
                shift
                ;;
            # this is function call
            f )
                case "$src_type" in
                    cc|python|java|js|php|go|sol )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\b'"$4"'\b\s*\('
                        else
                            search_pattern="$4"'[\w\d_]*\s*\('
                        fi
                        ;;
                    # ruby is tricky
                    ruby )
                        if [ $wwords -eq 1 ]; then
                            search_pattern='\b'"$4"'\b'
                        else
                            search_pattern="$4"
                        fi
                        ;;
                esac
                shift
                ;;

            # normal form: camelcase vs underscore/dash
            n )
                case "$src_type" in
                    web )
                        normal_form_separator='-'
                        ;;
                    * )
                        normal_form_separator='_'
                        ;;
                esac
                include_normal_form="false"
                search_pattern="$4"
                normal_form=`MYACK_NORMAL_FORM_SEPARATOR="$normal_form_separator" $normalizer $search_pattern`
                if [ "$normal_form" != "$search_pattern" ]; then
                    include_normal_form="true"
                    if [ $wwords -eq 1 ]; then
                        normal_form='\b'"$normal_form"'\b'
                    fi
                fi

                if [ $wwords -eq 1 ]; then
                    search_pattern='\b'"$search_pattern"'\b'
                fi
                if [ $include_normal_form == "true" ]; then
                    search_pattern="$search_pattern"'|'"$normal_form"
                fi
                shift
                ;;
            * )
                # don't shift; this arg was not an entity_type
                entity_type_found="false"
                ;;
        esac
    fi
    # if search_patern was not computed above, with entity type in consideration
    # do the generic search pattern construction
    if [ $entity_type_found == "false" ]; then
        # after shift OR missing entity_type $3 is the pattern
        # test existance of mandatory arg
        if [ -z "$3" ]; then
                echo "Usage: g[p][w][i] [fc|fp|fr|fj|fja|fphp|fw|fg] [c|d|f] <regex to match> [<path>...] [<more_options>]"
                return 1
        fi
        search_pattern="$3"
        if [ $wwords -eq 1 ]; then
            search_pattern='\b'"$search_pattern"'\b'
        fi
    fi


#test for path
    if [ -n "$4" ]; then
        shift 3
        dir="$*"
    else
        dir=""
    fi

  ack $icase $src_type_args "$search_pattern" $dir
}

# general alias - search all *known* file types. use 'fa' arg for really all
g() {
    _do_the_ack-grep 0 0 "$@"
}
# general alias - whole words
gw() {
    _do_the_ack-grep 0 1 "$@"
}
# general alias - case insensitive
gi() {
    _do_the_ack-grep 1 0 "$@"
}
# general alias - whole words and case insensitive
gwi() {
    _do_the_ack-grep 1 1 "$@"
}

# search python files, add 'd' arg for function definitions, add 'c' arg for classes
gp() {
    _do_the_ack-grep 0 0 fp "$@"
}
# search python files - whole words
gpw() {
    _do_the_ack-grep 0 1 fp "$@"
}
# search python files - case insensitive
gpi() {
    _do_the_ack-grep 1 0 fp "$@"
}
# search python files - whole words and case insensitive
gpwi() {
    _do_the_ack-grep 1 1 fp "$@"
}

# search javascript files, add 'd' arg for function definitions, add 'c' arg for classes
gj() {
    _do_the_ack-grep 0 0 fj "$@"
}
# search javascript files - whole words
gjw() {
    _do_the_ack-grep 0 1 fj "$@"
}
# search javascript files - case insensitive
gji() {
    _do_the_ack-grep 1 0 fj "$@"
}
# search javascript files - whole words and case insensitive
gjwi() {
    _do_the_ack-grep 1 1 fj "$@"
}
