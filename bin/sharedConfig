#!/usr/bin/env python

import sys
import subprocess, os, os.path, stat, shutil
import re


g_exclude_filenames = ('~','.swp')
g_repo_dir = None
g_home_dir = os.environ[ 'HOME' ]
g_independent_files = None

def walk_dirs( repo_path, action, quiet = False ):
  global g_home_dir
  repo_path = os.path.abspath( repo_path )
  files = os.listdir( repo_path )

  for name in files:
    name = os.path.join( repo_path, name )
    details = os.stat( name )

    if stat.S_ISDIR( details.st_mode ):
      if os.path.basename( name ) == '.git':
        continue
      walk_dirs( name, action, quiet )
    if stat.S_ISREG( details.st_mode ):
      global g_exclude_filenames, g_repo_dir
      if name.endswith( g_exclude_filenames ): continue
      home_path = os.path.join( g_home_dir, name[len(g_repo_dir)+1:] )
      action( name, home_path, quiet )

def areHardLinks( src, dst ):
  try:
    srcDetails = os.stat( src )
    dstDetails = os.stat( dst )
  except BaseException as e:
    return False
  
  if srcDetails[ stat.ST_INO ] == dstDetails[ stat.ST_INO ]:
    return True
  
  return False

def diff( src, dst, quiet ):

  global g_repo_dir, g_independent_files

  # don't diff independent files
  if src[len(g_repo_dir)+1:] in g_independent_files and g_independent_files[ src[len(g_repo_dir)+1:] ]:
    return
  if not quiet:
    sys.stderr.write( "diffing: " + "diff " + "-wu " + dst + " " + src + '\n' )
  subprocess.call(["diff", "-wu", dst, src ] )


def link( src, dst, quiet ):
  if not quiet:
    print "linking: ", dst, "to ", src, '.',
    subprocess.call(["diff", "-wu", dst, src ] )
    answer = raw_input("Are you sure? Link, reverse link, break the linkage, delete repo file (y/r/u/d/n) ?")
  else:
    answer = 'y'

  global g_independent_files, g_home_dir

  if answer == 'y':
    if not os.path.exists( os.path.dirname( dst ) ):
      os.makedirs( os.path.dirname( dst ) )
    elif areHardLinks( src, dst ):
      if not quiet: print "%s and %s are already linked" % (src, dst)
      return
    elif os.path.exists( dst ):
      os.rename( dst, dst+".git.bak" )
    # if it is a symlink, copy it as it is
    if os.path.islink( src ):
      linkto = os.readlink( src )
      try:
        os.symlink( linkto, dst )
      except BaseException as e:
        if not quiet: print e
    else:
      os.link( src, dst )
    # remove relative file name to independent files
    g_independent_files[ dst[len(g_home_dir)+1:] ] = False
  elif answer == 'r':
    os.remove( src )
    os.link( dst, src )
    # remove relative file name to independent files
    g_independent_files[ dst[len(g_home_dir)+1:] ] = False
  elif answer == 'u':
    os.remove( dst )
    shutil.copy2( src, dst )
    # add relative file name to independent files
    g_independent_files[ dst[len(g_home_dir)+1:] ] = True
  elif answer == 'd':
    os.remove( src )
    # remove relative file name to independent files; dst is a well formed path, even though it may not exist
    g_independent_files[ dst[len(g_home_dir)+1:] ] = False

def post_merge_relink( src, dst, quiet ):
  global g_independent_files, g_repo_dir

  # if src is not marked to be excluded
  if src[len(g_repo_dir)+1:] in g_independent_files and g_independent_files[ src[len(g_repo_dir)+1:] ]:
    return
  # if src has only one hard link count
  if os.stat( src ).st_nlink == 1:
    link( src, dst, quiet )


def get_independent( name='.independent_files' ):
  global g_home_dir
  d = {}
  try:
    f = open( os.path.join( g_home_dir, name ) )
  except:
    # it's ok if no exception list
    return d

  for line in f:
    d[line.strip()] = True

  f.close()
  return d

def save_independent( name='.independent_files' ):
  global g_independent_files
  # truncate
  f = open( os.path.join( g_home_dir, name ), 'w' )
  # leave exception uncaught - this really is exceptional

  for name, keep in g_independent_files.iteritems():
    if keep:
      f.write(name)
  f.close()

def main(av):
  if len( av ) < 1:
    print "Provide a command"
    sys.exit(1)

  if len( av ) < 2:
    print "Provide configuration repo directory."
    sys.exit(1)

  verbose= False
  if len( av ) >= 3:
    if av[2] == '-v' or av[2] == '--verbose':
      verbose = True

  global g_repo_dir
  g_repo_dir = os.path.abspath( av[1] )
  global g_home_dir
  global g_independent_files
  g_independent_files = get_independent()

  if av[0] == 'diff':
    walk_dirs( av[1], diff, quiet = not verbose )
  elif av[0] == 'link':
    walk_dirs( av[1], link )
    save_independent()
  elif av[0] == 'post-merge':
    walk_dirs( av[1], post_merge_relink, quiet = not verbose )
    save_independent()


if __name__ == "__main__":
  main(sys.argv[1:])

